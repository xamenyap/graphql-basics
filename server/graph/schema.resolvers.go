package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/xamenyap/graphql-basics/server/graph/model"
)

// AddReview is the resolver for the addReview field.
func (r *mutationResolver) AddReview(ctx context.Context, productID string, content string, rating int) (*model.Review, error) {
	idx := -1
	for i, p := range r.products {
		if p.ID == productID {
			idx = i
			break
		}
	}

	if idx == -1 {
		return nil, fmt.Errorf("cannot find product with id %s", productID)
	}

	defer fmt.Println(r.products)
	return addReview(&r.products[idx], content, rating)
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Product, error) {
	for _, p := range r.products {
		if p.ID == id {
			return &p, nil
		}
	}

	return nil, fmt.Errorf("cannot find product with id %s", id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func addReview(p *model.Product, content string, rating int) (*model.Review, error) {
	r := &model.Review{
		Content:   content,
		Rating:    rating,
		ProductID: p.ID,
	}

	p.Reviews = append(p.Reviews, r)

	return r, nil
}
